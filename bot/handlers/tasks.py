import logging
from typing import Union

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove

import bot.db.requests as rq
import bot.keyboards as kb
from bot.filters import StatusFilter
from bot.states import Task as TaskState

router = Router()


async def my_tasks(msg_or_cb: Union[Message, CallbackQuery]):
	user_id = msg_or_cb.from_user.id
	task_text = '–í–æ—Ç –≤–∞—à–∏ –∑–∞–¥–∞—á–∏ üëá'
	if isinstance(msg_or_cb, Message):
		await msg_or_cb.answer(task_text, reply_markup=await kb.get_user_tasks(user_id))
	else:
		await msg_or_cb.message.edit_text(task_text, reply_markup=await kb.get_user_tasks(user_id))


async def add_task(msg_or_cb: Union[Message, CallbackQuery], state: FSMContext):
	user_id = msg_or_cb.from_user.id
	title_text = '‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏.'
	await state.set_state(TaskState.title)
	await state.update_data(user_id=user_id, status='creating')
	if isinstance(msg_or_cb, Message):
		await msg_or_cb.answer(title_text, reply_markup=kb.cancel)
	else:
		await msg_or_cb.answer()
		await msg_or_cb.message.answer(title_text, reply_markup=kb.cancel)


@router.message(Command('my_tasks'))
async def my_tasks_command(msg: Message):
	await my_tasks(msg)


@router.callback_query(F.data == 'my_tasks')
async def my_tasks_callback(cb: CallbackQuery):
	await my_tasks(cb)


@router.message(Command('add_task'))
async def add_task_command(msg: Message, state: FSMContext):
	await add_task(msg, state)


@router.callback_query(F.data == 'add_task')
async def add_task_callback(cb: CallbackQuery, state: FSMContext):
	await add_task(cb, state)


@router.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞')
async def cancel_task(msg: Message, state: FSMContext):
	current_status = await state.get_value('status', None)
	cancel_text = 'üéâ –£—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ!'
	choose_operation_text = '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç—ã –Ω–∏–∂–µ üëá'

	if current_status == 'creating':
		await msg.answer(cancel_text, reply_markup=ReplyKeyboardRemove())
		await msg.answer(choose_operation_text, reply_markup=kb.main)

	elif current_status == 'editing':
		task_id = await state.get_value('task_id', None)

		if task_id:
			task = await rq.get_task(task_id)

			if task:
				await msg.answer(cancel_text, reply_markup=ReplyKeyboardRemove())
				await msg.answer(
					f'_{task.title}_\n\n{task.description}',
					reply_markup=await kb.task_view_settings(task.id))
			else:
				await msg.answer('‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', reply_markup=ReplyKeyboardRemove())
				await msg.answer(choose_operation_text, reply_markup=kb.main)
		else:
			await msg.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏', reply_markup=ReplyKeyboardRemove())
			await msg.answer(choose_operation_text, reply_markup=kb.main)

	else:
		await msg.answer('‚ùå –ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å.', reply_markup=ReplyKeyboardRemove())
		await msg.answer(choose_operation_text, reply_markup=kb.main)
	await state.clear()


@router.message(TaskState.title, StatusFilter('creating'))
async def add_task_title(msg: Message, state: FSMContext):
	await state.update_data(title=msg.text)
	await state.set_state(TaskState.description)
	await msg.answer('‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–∫—É —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º.', reply_markup=kb.cancel)


@router.message(TaskState.description, StatusFilter('creating'))
async def add_task_description(msg: Message, state: FSMContext):
	await state.update_data(description=msg.text)
	data = await state.get_data()
	user_id = msg.from_user.id
	desc = '' if data.get('description', '.') == '.' else data['description']
	try:
		task = await rq.create_task(data.get('title'), desc, user_id)
		await msg.answer('üéâ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞', reply_markup=ReplyKeyboardRemove())
		await msg.answer('–í–æ—Ç –≤–∞—à–∏ –∑–∞–¥–∞—á–∏ üëá', reply_markup=await kb.get_user_tasks(user_id))
	except Exception as e:
		logging.error(f'An error occurred while creating task: {e}')
		await msg.answer(
			'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.',
			reply_markup=kb.main)
	await state.clear()


@router.callback_query(F.data.startswith('task_'))
async def view_task(cb: CallbackQuery):
	try:
		task_id = int(cb.data.split('_')[-1])
		task = await rq.get_task(task_id)
		txt = f'*{task.title}*\n\n{task.description}'
		await cb.message.edit_text(txt, reply_markup=await kb.task_view_settings(task_id))
	except Exception as e:
		logging.error(e)
		await cb.message.edit_text('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–¥–∞—á–µ', reply_markup=kb.main)


@router.callback_query(F.data.startswith('change_task_status_'))
async def change_task_status(cb: CallbackQuery):
	try:
		task_id = int(cb.data.split('_')[-1])
		await rq.change_task_stat(task_id)
		await cb.answer('–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!', show_alert=True)
		await cb.message.edit_reply_markup(reply_markup=await kb.task_view_settings(task_id))
	except Exception as e:
		logging.error(e)
		await cb.answer('‚ùå  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏', show_alert=True)


@router.callback_query(F.data.startswith('delete_task_'))
async def delete_task(cb: CallbackQuery):
	try:
		task_id = int(cb.data.split('_')[-1])
		await cb.message.edit_text(
			'–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É?',
			reply_markup=await kb.delete_task_confirmation(task_id))
	except Exception as e:
		logging.error(e)
		await cb.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏', show_alert=True)


@router.callback_query(F.data.startswith('delete_confirm_'))
async def delete_task_confirm(cb: CallbackQuery):
	try:
		task_id = int(cb.data.split('_')[-1])
		await rq.delete_task(task_id)
		await cb.answer('–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!', show_alert=True)
		await cb.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É üëá', reply_markup=await kb.get_user_tasks(cb.from_user.id))
	except Exception as e:
		logging.error(e)
		await cb.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏', show_alert=True)


@router.callback_query(F.data.startswith('edit_task_'))
async def edit_task(cb: CallbackQuery, state: FSMContext):
	try:
		task_id = int(cb.data.split('_')[-1])
		task = await rq.get_task(task_id)
		await state.set_state(TaskState.title)
		await state.update_data(
			task_id=task.id,
			title=task.title,
			description=task.description,
			status='editing'
		)
		await cb.message.answer(
			f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞–≥–æ–ª–æ–≤–∫—É –∑–∞–¥–∞—á–∏ üëá\n–¢–µ–∫—É—â–µ–µ: _{task.title}_',
			reply_markup=kb.cancel_edit
		)
	except Exception as e:
		logging.error(e)
		await cb.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–¥–∞—á–µ', show_alert=True)


@router.message(TaskState.title, StatusFilter('editing'))
async def edit_task_title(msg: Message, state: FSMContext):
	if msg.text != 'üìå –û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ':
		await state.update_data(title=msg.text)
		data = await state.get_data()
		txt = f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ üëá\n\n–¢–µ–∫—É—â–µ–µ: _{data.get('description')}_'
	else:
		txt = '–û—Å—Ç–∞–≤–ª–µ–Ω —Ç–µ–∫—É—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–∫—É —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º.'
	await msg.answer(txt, reply_markup=kb.cancel_edit)
	await state.set_state(TaskState.description)


@router.message(TaskState.description, StatusFilter('editing'))
async def edit_task_description(msg: Message, state: FSMContext):
	try:
		if msg.text != 'üìå –û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ':
			await state.update_data(description=msg.text if msg.text != '.' else '')
		data = await state.get_data()
		task_id = data.get('task_id')
		task_title = data.get('title')
		task_description = data.get('description')
		await rq.update_task(task_id, task_title, task_description)
		await msg.answer('‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!', reply_markup=ReplyKeyboardRemove())
		await msg.answer(
			f'*{task_title}*\n\n{task_description}',
			reply_markup=await kb.task_view_settings(task_id))
		await state.clear()
	except Exception as e:
		logging.error(e)
		await msg.answer(
			'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.',
			reply_markup=kb.main)
