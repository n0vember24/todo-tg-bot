from typing import Union

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove

import bot.keyboards as kb
from bot.db.requests import TaskManager
from bot.filters import StatusFilter
from bot.states import Task as TaskState

router = Router()


@router.message(Command('my_tasks'))
@router.callback_query(F.data == 'my_tasks')
async def my_tasks(msg_or_cb: Union[Message, CallbackQuery]):
	"""View a list of user tasks"""
	user_id = msg_or_cb.from_user.id
	task_text = '–í–æ—Ç –≤–∞—à–∏ –∑–∞–¥–∞—á–∏ üëá'
	if isinstance(msg_or_cb, Message):
		await msg_or_cb.answer(task_text, reply_markup=await kb.get_user_tasks(user_id))
	else:
		await msg_or_cb.message.edit_text(task_text, reply_markup=await kb.get_user_tasks(user_id))


@router.message(Command('add_task'))
@router.callback_query(F.data == 'add_task')
async def add_task(msg_or_cb: Union[Message, CallbackQuery], state: FSMContext):
	"""Create a new task"""
	user_id = msg_or_cb.from_user.id
	title_text = '‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏.'
	await state.set_state(TaskState.title)
	await state.update_data(user_id=user_id, status='creating')
	if isinstance(msg_or_cb, Message):
		await msg_or_cb.answer(title_text, reply_markup=kb.cancel)
	else:
		await msg_or_cb.answer()
		await msg_or_cb.message.answer(title_text, reply_markup=kb.cancel)


@router.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞')
async def cancel(msg: Message, state: FSMContext):
	current_status = await state.get_value('status', None)
	cancel_text = 'üéâ –£—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ!'
	choose_operation_text = '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç—ã –Ω–∏–∂–µ üëá'
	if current_status == 'creating':
		await msg.answer(cancel_text, reply_markup=ReplyKeyboardRemove())
		await msg.answer(choose_operation_text, reply_markup=kb.main)
	elif current_status == 'editing':
		task_id = await state.get_value('task_id', None)
		if task_id:
			task = await TaskManager.get(task_id)
			if task:
				await msg.answer(cancel_text, reply_markup=ReplyKeyboardRemove())
				await msg.answer(
					f'*{task.title}*\n\n{task.description}',
					reply_markup=await kb.view_task_details(task))
			else:
				await msg.answer('‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', reply_markup=ReplyKeyboardRemove())
				await msg.answer(choose_operation_text, reply_markup=kb.main)
		else:
			await msg.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏', reply_markup=ReplyKeyboardRemove())
			await msg.answer(choose_operation_text, reply_markup=kb.main)
	else:
		await msg.answer('‚ùå –ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å.', reply_markup=ReplyKeyboardRemove())
		await msg.answer(choose_operation_text, reply_markup=kb.main)
	await state.clear()


@router.message(TaskState.title, StatusFilter('creating'))
async def add_task_title(msg: Message, state: FSMContext):
	await state.update_data(title=msg.text)
	await state.set_state(TaskState.description)
	await msg.answer(
		'‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.',
		reply_markup=kb.cancel_empty)


@router.message(TaskState.description, StatusFilter('creating'))
async def add_task_description(msg: Message, state: FSMContext):
	user_id = msg.from_user.id
	description = msg.text if msg.text != 'üóí –û—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º' else ''
	title = await state.get_value('title')
	task = TaskManager(user_id, title, description)
	await task.create()
	await msg.answer('üéâ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞', reply_markup=ReplyKeyboardRemove())
	await msg.answer('–í–æ—Ç –≤–∞—à–∏ –∑–∞–¥–∞—á–∏ üëá', reply_markup=await kb.get_user_tasks(user_id))
	await state.clear()


@router.callback_query(F.data.startswith('task_'))
async def view_task(cb: CallbackQuery):
	task_id = int(cb.data.split('_')[-1])
	task = await TaskManager.get(task_id)
	txt = f'*{task.title}*\n\n{task.description}'
	await cb.message.edit_text(txt, reply_markup=await kb.view_task_details(task))


@router.callback_query(F.data.startswith('change_task_status_'))
async def change_task_status(cb: CallbackQuery):
	task_id = int(cb.data.split('_')[-1])
	await TaskManager(task_id=task_id).toggle_status()
	task = await TaskManager.get(task_id)
	await cb.answer('–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!', show_alert=True)
	await cb.message.edit_reply_markup(reply_markup=await kb.view_task_details(task))


@router.callback_query(F.data.startswith('delete_task_'))
async def delete_task(cb: CallbackQuery):
	task_id = int(cb.data.split('_')[-1])
	await cb.message.edit_text(
		'–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É?',
		reply_markup=await kb.delete_task_confirmation(task_id))


@router.callback_query(F.data.startswith('delete_confirm_'))
async def delete_task_confirm(cb: CallbackQuery):
	task_id = int(cb.data.split('_')[-1])
	await TaskManager(task_id=task_id).delete()
	await cb.answer('–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!', show_alert=True)
	await cb.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É üëá', reply_markup=await kb.get_user_tasks(cb.from_user.id))


@router.callback_query(F.data.startswith('edit_task_'))
async def edit_task(cb: CallbackQuery, state: FSMContext):
	task_id = int(cb.data.split('_')[-1])
	task = await TaskManager.get(task_id)
	await state.set_state(TaskState.title)
	await state.update_data(
		task_id=task.id,
		title=task.title,
		description=task.description,
		status='editing'
	)
	await cb.message.answer(
		f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞–≥–æ–ª–æ–≤–∫—É –∑–∞–¥–∞—á–∏ üëá\n–¢–µ–∫—É—â–µ–µ: _{task.title}_',
		reply_markup=kb.cancel_edit
	)


@router.message(TaskState.title, StatusFilter('editing'))
async def edit_task_title(msg: Message, state: FSMContext):
	if msg.text != 'üìå –û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ':
		await state.update_data(title=msg.text)
		data = await state.get_data()
		txt = f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ üëá\n\n–¢–µ–∫—É—â–µ–µ: _{data.get('description')}_'
	else:
		data = await state.get_data()
		txt = f'–û—Å—Ç–∞–≤–ª–µ–Ω —Ç–µ–∫—É—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.\n\n–¢–µ–∫—É—â–µ–µ: _{data.get('description')}_'
	await msg.answer(txt, reply_markup=kb.cancel_edit_empty)
	await state.set_state(TaskState.description)


@router.message(TaskState.description, StatusFilter('editing'))
async def edit_task_description(msg: Message, state: FSMContext):
	if msg.text != 'üìå –û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ':
		await state.update_data(description=msg.text if msg.text != 'üóí –û—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º' else '')
	data = await state.get_data()
	task_id = data.get('task_id')
	task_title = data.get('title')
	task_description = data.get('description')
	task = TaskManager(None, task_title, task_description, task_id)
	await task.update()
	await msg.answer('‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!', reply_markup=ReplyKeyboardRemove())
	await msg.answer(
		f'*{task_title}*\n\n{task_description}',
		reply_markup=await kb.view_task_details(await TaskManager.get(task_id)))
	await state.clear()
